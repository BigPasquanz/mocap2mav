//// Created by andrea on 15/03/16.//#include <stdio.h>#include <lcm/lcm-cpp.hpp>#include "../exlcm/example_t.hpp"#include "NatNetReceiver.h"#include <QApplication>#include "utils.h"class listener{public:    void callback(const lcm::ReceiveBuffer* rbuf, const std::string& chan, const exlcm::example_t* msg){        printf("Received message on channel \"%s\":\n", chan.c_str());        printf("  timestamp   = %lld\n", (long long)msg->timestamp);        printf("  position    = (%f, %f, %f)\n",msg->position[0], msg->position[1], msg->position[2]);        printf("  orientation = (%f, %f, %f, %f)\n",msg->orientation[0], msg->orientation[1],msg->orientation[2], msg->orientation[3]);        printf("  ranges:");        for(int i = 0; i < msg->num_ranges; i++)            printf(" %d", msg->ranges[i]);        printf("\n");        printf("  name        = '%s'\n", msg->name.c_str());        printf("  enabled     = %d\n", msg->enabled);    }};int main(int argc, char** argv){    lcm::LCM handler;    if (!handler.good())        return 1;    node n;    listener listener_obj;    handler.subscribe("EXAMPLE",&listener::callback,&listener_obj);    QApplication a(argc, argv);    NatNetReceiver nat;	//funzioni nat       while(0 == handler.handle());    return 0;}